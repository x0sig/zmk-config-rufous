/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace

#define DEF 0
#define NUM 1
#define NAV 2
#define SYS 3

#define QUICK_TAP_MS 175

#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define THUMBS 30 31 32 33

&sk {  // sticky-key config
    release-after-ms = <1000>; // release after 1s
    quick-release;             // no double capitalization when rolling keys
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        sys_condition {
            if-layers = <NUM NAV>;
            then-layer = <SYS>;
        };
    };
    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };
        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };
    };
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LALT Q   &kp W  &kp E  &kp R      &kp T              &kp Y      &kp U       &kp I  &kp O  &mt LGUI P
&hml LALT A &hml LGUI S &hml LCTRL D &hml LSHFT F &kp G &kp H     &hmr RSHFT J  &hmr RCTRL K   &hmr RGUI L   &hmr RALT Z
             &kp X  &kp C  &kp V                                    &kp B       &kp N  &kp M
                           &kp ESC  &lt NUM ENTER    &lt NAV SPACE  &kp BSPC
            >;
        };

        num_layer {
            bindings = <
&kp GRAVE  &kp TILDE  &kp AT  &kp CARET  &kp HASH    &kp MINUS    &kp N7  &kp N8  &kp N9  &kp STAR
&hml LALT DLLR &hml LGUI AMPS &hml LCTRL PRCNT &hml LSHFT UNDER &kp PIPE &kp PLUS     &hmr RSHFT N4  &hmr RCTRL N5   &hmr RGUI N6   &hmr RALT SLASH



&kp EXCL &kp SINGLE_QUOTE &kp DOUBLE_QUOTES                   &kp N1  &kp N2  &kp N3
                                &trans    &trans       &kp N0 &kp BACKSLASH
            >;
        };

        sym_layer {
            bindings = <
&kp SEMI  &kp COLON  &kp LT  &kp GT     &kp DOT      &kp C_VOL_UP  &kp C_VOL_DN  &kp K_MUTE  &kp END    &kp PG_UP
&hml LALT LBKT &hml LGUI RBKT &hml LCTRL LPAR &hml LSHFT RPAR &kp COMMA &kp LEFT     &hmr RSHFT DOWN  &hmr RCTRL UP   &hmr RGUI RIGHT   &hmr RALT PG_DN
         &kp EQUAL  &kp LBRC  &kp RBRC                          &kp C_PP   &kp C_PREV   &kp C_NEXT
                         &kp TAB  &kp QMARK             &trans    &trans
            >;
        };

        fn_layer {
            bindings = <
&kp F1  &kp F2   &kp F3   &kp F4     &kp F5     &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &out OUT_TOG
&kp F6  &kp F7   &kp F8   &kp F9     &kp F10    &kp C_NEXT  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PP      &kp RSHFT
        &kp F11  &kp F12  &kp PSCRN                         &kp RGUI      &kp RALT      &kp RCTRL
                          &trans     &trans     &trans      &trans
            >;
        };
    };
};
